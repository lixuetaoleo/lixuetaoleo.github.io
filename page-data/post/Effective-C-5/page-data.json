{"componentChunkName":"component---src-template-index-tsx","path":"/post/Effective-C-5/","result":{"data":{"markdownRemark":{"html":"<h2>Item13：以对象管理资源</h2>\n<ol>\n<li>对于常见的资源，如动态分配内存，文件描述符，互斥锁，图形界面中的字型和笔刷，数据库连接，sockets等，不再使用它们时，必须交还给系统。</li>\n<li>\n<p>虽然可能考虑到了delete，如下：</p>\n<pre><code>void f(){\nInvestment *pInv = createInvestment();\n...\ndelete pInv;\n}\n</code></pre>\n<p>但是由于在...那里因为某些原因return了，将造成资源泄漏。\n因此需要将资源放进对象里，当控制流离开f，该对象的析构函数会自动释放那些资源。</p>\n</li>\n<li>“以对象管理资源”的观念常被称为“资源取得时机便是初始化时机”(Resource Acquisition Is Initialization; RAII)</li>\n<li>常用的RAII是shared_ptr，引用计数型智能指针，使用它，用户不用再考虑delete问题。</li>\n<li>shared<em>ptr内部使用的是delete而非delete[]，因此不要在shared</em>ptr上构造数组(但从c++17开始，shared_ptr也支持数组形式了)。</li>\n</ol>\n<h2>Item 14：在资源管理类中小心copying行为</h2>\n<ol>\n<li>\n<p>在一个RAII对象尝试复制时，通常采取以下两种做法：</p>\n<ul>\n<li>禁止复制。如果复制动作对RAII class不合理(比如说mutex)，那么应该禁止它。具体做法：对象的类private继承Uncopyable类。</li>\n<li>对底层资源祭出“引用计数法”。有时候我们希望保有资源，直到它的最后一个使用者（某对象）被销毁。这种情况下就是复制RAII对象时，将该资源的“被引用数”递增，shared_ptr就是这种做法。</li>\n</ul>\n</li>\n</ol>\n<h2>Item 15：在资源管理类中提供对原始资源的访问</h2>\n<ol>\n<li>假设一个函数的参数是raw pointer，但是其实参却是一个智能指针(一个RAII对象)，这样是不行的。可以利用get()方法返回智能指针内部的原始指针(的复件)。</li>\n<li>还可以用隐式方法返回原始资源(operator Classname() const{return var;})，但是一般而言用显式方法比较安全。</li>\n</ol>\n<h2>Item 16：成对使用new和delete时要采取相同形式</h2>\n<ol>\n<li>即new -- delete, new[] -- delete[]</li>\n<li>避免诸如typedef std::string AddressLines[4]然后std::string *p1 = new AddressLines; 但是delete p1的情况发生，最好尽量不要对数组形式采取typedef。</li>\n</ol>\n<h2>Item 17：以独立语句将newed对象置入智能指针</h2>\n<p>假设如下函数：</p>\n<pre><code>int priority();\nvoid processWidget(std::shared_ptr&#x3C;Widget> pw, int priority);\n</code></pre>\n<p>如果调用它时采用了</p>\n<pre><code>processWidget(new Widget, priority());\n</code></pre>\n<p>这种形式，无法通过编译。因为shared_ptr构造时需要的一个raw pointer是explicit构造函数，不支持复制初始化，所以调用应该按如下形式：</p>\n<pre><code>processWidget(std::shared_ptr&#x3C;Widget>(new Widget), priority());\n</code></pre>\n<p>但是按上面的形式写，可能导致资源泄漏。</p>\n<p>分析：\n上述的调用函数，在调用之前，编译器必须创建代码，做以下三件事：</p>\n<ol>\n<li>调用priority</li>\n<li>执行“new Widget”</li>\n<li>调用shared_ptr构造函数</li>\n</ol>\n<p>但是在编译时，C++执行次序弹性很大（与C#和Java有很大不同），因此可能出现以下的次序（虽然new widget肯定是在shared_ptr的ctor之前调用）：</p>\n<ol>\n<li>执行“new Widget”</li>\n<li>调用priority</li>\n<li>调用shared_ptr构造函数</li>\n</ol>\n<p>万一在调用priority时发生了异常，在此情况下new widget返回的指针将会遗失，造成资源泄漏。</p>\n<p>为避免这类问题，使用分离语句：</p>\n<ol>\n<li>创建widget</li>\n<li>将它置入一个智能指针内</li>\n<li>将智能指针传入processWidget</li>\n</ol>\n<pre><code>std::shared_ptr&#x3C;Widget> pw(new Widget);\nprocessWidget(pw, priority());  //这样就防止了资源泄漏问题\n</code></pre>","frontmatter":{"title":"Effective C++ 5","date":"2019-11-07","titleImage":null}}},"pageContext":{"slug":"/Effective-C-5/"}}}