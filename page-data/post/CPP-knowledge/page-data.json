{"componentChunkName":"component---src-template-index-tsx","path":"/post/CPP-knowledge/","result":{"data":{"markdownRemark":{"html":"<p>First commit</p>\n<p>2019-10-25 15:01:54</p>\n<p>总结一下遇到的C++知识点</p>\n<ol>\n<li>\n<p>编译error: expected identifier before numeric constant</p>\n<p>原因：c++的类体中，方法以外的区域可以初始化，只是不能用括号初始化，要用赋值初始化！</p>\n<pre><code>class A{\n std::vector&#x3C;std::string> v(9);  //error,expected identifier before numeric constant\n std::vector&#x3C;std::string> v = std::vector&#x3C;std::string>(5); //OK, it's a private member.\npublic:\n void test(){} //just a demo for representing out of function.\n};\n</code></pre>\n<p>但是在C++11以前，需要先声明变量，然后再初始化他们（比如在ctor中）</p>\n<pre><code>class Foo {\nvector&#x3C;string> name;\nvector&#x3C;int> val;\npublic:\nFoo() : name(5), val(5,0) {}\n};\n</code></pre>\n</li>\n<li>\n<p>vector的emplace<em>back()不能传入{1,2,3}这样的initializer list，push</em>back可以。</p>\n<p>emplace_back的形参是可变参数。</p>\n<pre><code>template&#x3C; class... Args >\nreference emplace_back( Args&#x26;&#x26;... args );\n</code></pre>\n<p>因此当emplace<em>back({1,2,3})这样调用时，等于是只传入了一个参数，而Args无法推导出{1,2,3}的类型(C++中没有这种类型的数据)，它是一个用大括号括起来的init-list，可以在某些类型的初始化中使用，但都需要知道初始化的类型。\n所以诸如std::vector temp = {1,2};然后传入emplace</em>back这样是ok的，因为vector的构造可以匹配得到这种init-list，但是如果是自己写的一个类，并且该类的构造没有匹配这种init-list，这样也是不行的。</p>\n<p>虽然上面std::vector temp = {1,2}然后传入emplace<em>back这样是ok的，但是不建议这样做，因为如果这样用emplace</em>back的话，效果和直接用push<em>back是一样的了，即创建了一个临时变量然后再使用移动构造，这和push</em>back的思想是一样的。而emplace<em>back比push</em>back效率高的原因就是因为emplace<em>back是把传入的元素就地构造，只调用一次构造函数，而push</em>back是先把传入的元素构造出一个临时变量，然后再调用移动构造把这个临时变量赋到原先的vector。</p>\n</li>\n<li>\n<p>如果你已经知道，某个变量在之后就不会在用到了，这时候可以选择显式的移动，可以使用\nstatic_cast&#x3C;X&#x26;&#x26;>\n将对应变量转换为右值，或者通过调用\nstd::move()\n函数来做这件事：</p>\n<pre><code>X x1;\n\nX x2=std::move(x1);\n\nX x3=static_cast&#x3C;X&#x26;&#x26;>(x2);\n</code></pre>\n</li>\n<li>\n<p>C++的三种访问权限与三种继承方式</p>\n<p>三种访问权限：</p>\n<ol>\n<li>public: 对本类可见，对子类可见，对调用方(对象)可见。</li>\n<li>protected: 对本类可见，对子类可见，对调用方(对象)<code>不</code>可见。</li>\n<li>private: 对本类可见，对子类<code>不</code>可见，对调用方(对象)<code>不</code>可见。</li>\n</ol>\n<p>三种继承方式：</p>\n<ol>\n<li><code>三种继承方式不影响子类对父类的访问权限，子类对父类只看父类的访问控制权。</code></li>\n<li><code>继承方式是为了控制子类(也称派生类)的调用方(也叫用户)对父类(也称基类)的访问权限。</code></li>\n<li><code>public、protected、private三种继承方式，相当于把父类的public访问权限在子类中变成了对应的权限。</code> 如protected继承，把父类中的public成员在本类中变成了protected的访问控制权限；private继承，把父类的public成员和protected成员在本类中变成了private访问控制权。</li>\n</ol>\n</li>\n<li>\n<p>直接初始化和拷贝初始化是否有底层实现上的差别？比如，T a(b) 和 T a = b，假如不考虑编译器所做的优化，这两种语句是否会生成同样的机器指令？或者说硬件层面的操作差别？</p>\n<ul>\n<li>是一样的。不过区别是，如果T的构造函数标记了explicit，那么T a = b;会有语法错误</li>\n<li>T a = b 就是 T a(b) 的语法糖, 区别就是 T a = b 要求不是 explicit.</li>\n<li>有 T a = b这样的语法 是因为C 的原因。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p><code>2019/11/5 updated</code></p>\n<ol start=\"6\">\n<li>\n<p>C++中struct和class区别</p>\n<p>不同于C中的struct，在C++中，struct可以有成员方法，也可以继承\n因此在C++中，struct和class的最本质区别在于以下几条：</p>\n<ul>\n<li>默认的权限，如果没有指明权限，在struct中默认权限时public，而class是private</li>\n<li>继承权限，struct默认是public，而class是private。<code>但是，public继承还是private继承，取决于子类而不是基类</code>。 struct可以继承class，同样class也可以继承struct，那么默认的继承访问权限是看子类到底是用的struct还是class。 </li>\n</ul>\n<p>还有以下“区别”：</p>\n<ul>\n<li>class可以作为模板参数，就像typename</li>\n</ul>\n<p>因此struct还是一般用来做数据结构，class作为类</p>\n<p>扩展：C ++ class与C struct有何不同?</p>\n<ul>\n<li>类也可以包含函数[称为方法]。 </li>\n<li>成员变量和方法对外界是隐藏的，除非它们的声明遵循公共标签。</li>\n<li>可以有一对特殊方法（构造函数和析构函数），它们在创建和销毁类[对象]的实例时自动运行。 </li>\n<li>可以使用特殊方法[成员函数]来定义用于新数据类型的运算符。运算符重载</li>\n<li>一个类可以用作定义另一种[继承性]的基础。</li>\n<li>声明新类型的变量[类的实例；一个对象]仅需要类的名称-不需要关键字class。而struct要</li>\n</ul>\n<p>The above has been inspired by the C++ Core Guideline (which is a great read by the way), in particular the following:</p>\n<ul>\n<li>Organize related data into structures (structs or classes) (把有一定联系的数据整合成一个结构(struct或class))</li>\n<li>Use class if the class has an invariant; use struct if the data members can vary independently（如果类具有不变性，则使用class；如果数据成员可以独立变化，则使用struct）</li>\n<li>Represent the distinction between an interface and an implementation using a class(用类来表现接口和实现之间的区别)</li>\n<li>\n<h2>Use class rather than struct if any member is non-public （如果有任一成员变量是非public的，用class） </h2>\n<p><code>2019/11/09 updated</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>C++中获取元素数据类型的方法</p>\n<p>首先引入头文件#include<typeinfo></p>\n<p>方法:typeid(varname).name();</p>\n<p>e.g.:</p>\n<pre><code>int a;\ntypeid(a).name();   \nint *a;\ntypeid(a).name();\n</code></pre>\n<p>输出:上面i,下面Pi,但是显示的类型是根据编译器决定(以上代码在MingW测试)</p>\n</li>\n</ol>\n<hr>\n<p>updated 2019-11-12</p>\n<ol start=\"8\">\n<li>\n<p>map vs unordered_map</p>\n<ul>\n<li>底层：红黑树 vs 哈希表</li>\n<li>增删查效率：o(logn) vs o(1)(一旦buckets已满，rehash将耗费很多时间)</li>\n<li>有序存储：是 vs 否</li>\n<li>空间复杂度：较小 vs 较大</li>\n<li>适用场景：(有序 &#x26; 对空间要求高) vs (增删查效率 &#x26; 对空间要求相对较低)</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>如果想在 map 中使用自定义的类，则必须为此类重载 &#x3C; 运算符</li>\n<li>如果想在 unordered_map 中使用自定义的类，则必须为此类提供一个哈希函数和重载 == 运算符）</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"CPP knowledge","date":"2019-11-12","titleImage":null}}},"pageContext":{"slug":"/CPP-knowledge/"}}}