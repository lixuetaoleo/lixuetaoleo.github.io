{"componentChunkName":"component---src-template-index-tsx","path":"/post/Effective-C-9/","result":{"data":{"markdownRemark":{"html":"<h1>Item 32：确定你的public继承塑模出is-a关系</h1>\n<ol>\n<li>public继承是\"is-a\"关系，牢记这条规则</li>\n<li>适用于base class上的每一件事情也一定适用于derived class，因为每一个derived class对象也都是一个base class对象。</li>\n</ol>\n<h1>Item 33：避免遮掩继承而来的名称</h1>\n<p>假设有如下例子：</p>\n<pre><code>class Base{\nprivate:\n    int x;\npublic:\n    virtual void mf1() = 0;\n    virtual void mf1(int);\n    virtual void mf2();\n    void mf3();\n    void mf3(double);\n    ...\n};\n\nclass Derived: public Base{\npublic:\n    virtual void mf1();\n    void mf3();\n    void mf4();\n};\n\nDerived d;\nint x;\n...\nd.mf1(); // 没问题,调用Derived::mf1\nd.mf1(x); // 错误,因为Derived::mf1遮掩了Base::mf1\nd.mf2(); // 没问题,调用Derived::mf2\nd.mf3(); // 没问题,调用Derived::mf3\nd.mf3(x); // 错误,因为Derived::mf3遮掩了Base::mf3\n</code></pre>\n<p>解决方法</p>\n<pre><code>在Derived Class中：\nclass Derived: public Base{\npublic:\n    using Base::mf1;  // 让Base Class内名为mf1和mf3的所有东西\n    using Base::mf3; // 在Derived作用域内都可见(并且public)\n    virtual void mf1();\n    void mf3();\n    void mf4();\n};\n</code></pre>\n<p>总结: 如果你继承base class并加上重载函数，而又希望重新定义或覆写其中一部分，那么必须为那些原本会被遮掩的每个名称引入一个using声明式，否则将产生遮掩</p>\n<p>有时你不想继承base class的所有函数，是可以理解的，但是，在public继承下，绝对不可能发生！！！</p>\n<p>在private继承下，继承部分函数的做法：加个转交函数(forwarding function)</p>\n<pre><code>class Base{\npublic:\n    virtual void mf1() = 0;\n    virtual void mf1(int);\n    ...\n};\n\nclass Derived: private Base{\npublic:\n    virtual void mf1() //转交函数暗自成为inline函数\n    {Base::mf1();}\n};\n\n...\nDerived d;\nint x;\nd.mf1(); // 调用的是Derived::mf1\nd.mf1(x); // Base::mf1被遮掩\n</code></pre>\n<h1>Item 34：区分接口继承和实现继承</h1>\n<ol>\n<li>声明一个纯虚函数的目的是为了让派生类只继承函数接口</li>\n<li>非纯虚函数目的是让派生类继承该函数的接口和缺省实现</li>\n<li>\n<p>如果有矛盾：支持接口和缺省应该分开，但是反对用不同的函数分别提供接口和缺省实现(因为会有class命名空间污染问题)，做法是利用“纯虚函数必须在派生类中重新声明，但是它们也能拥有自己的实现”这一特性。</p>\n<pre><code>class AirPlane{\npublic:\nvirtual void fly(...) = 0; //pure virtual\n};\n</code></pre>\n</li>\n</ol>\n<p>void AirPlane::fly(...){\n//缺省行为\n}</p>\n<p>class ModelA: public Airplane{\npublic:\nvirtual void fly(...){\nAirPlane::fly(...); //调用缺省行为,必须显式调用\n}\n...\n};</p>\n<p>class ModeB: public Airplane{\nvirtual void fly(...);\n};</p>\n<p>void ModelB::fly(...){\n//实现自己的版本\n}</p>\n<pre><code>4. 声明非虚函数的目的是为了令派生类继承函数的接口及一份强制性实现。\n5. 由于非虚函数代表的意义是不变性(invariant)和凌驾特异性(specialization)，所以它绝不该在派生类中被重新定义！！！(详见ITEM 36)\n6. 总结：\n\n    * 纯虚函数只具体指定接口继承\n    * 非纯虚函数具体指定接口继承以及缺省实现继承\n    * 非虚函数具体指定接口继承以及强制性实现继承\n\n# Item 36：绝不重新定义继承而来的non-virtual函数\n假设以下例子:\n</code></pre>\n<p>class B{\npublic:\nvoid mf();\n...\n};</p>\n<p>class D{\npublic:\nvoid mf(); //遮掩了B::mf,见item 33\n...\n}</p>\n<p>D x;\nB* pB = &#x26;x;\nD* pD = &#x26;x;\npB->mf(); //调用B::mf()\npD->mf(); //调用D::mf()</p>\n<pre><code>结果理应是pB和pD都通过对象x调用mf，但事与愿违\n\n原因：non-virtual函数是静态绑定，意思是由于pB被声明为一个pointer-to-B，通过pB调用的non-virtual函数永远是B所定义的版本，即使pB指向的是一个派生类的对象。\n\n但是virtual函数是动态绑定，如果mf是个virtual函数，无论通过pB或pD调用mf，都会导致调用D::mf,因为pB和pD真正指的都是一个类型为D的对象。\n\n# Item 37：绝不重新定义继承而来的缺省参数值\n1. virtual 函数是动态绑定，但是缺省参数值却是静态绑定。\n2. 有如下代码:\n   \n        class Shape{\n        public:\n            enum ShapeColor{Red, Green, Blue};\n            virtual void draw(ShapeColor color = Red) const = 0;\n            ...\n        };\n\n        class Rectangle: public Shape{\n        public:\n            virtual void draw(ShapeColor color = Green) const;//this is disgusting\n        };\n\n        class Circle: public Shape{\n        public:\n            virtual void draw(ShapeColor color) const;\n            注意：这么写则当客户以对象调用该函数时，一定要指定参数值。因为静态绑定下这个函数并不从base继承缺省参数值。\n            但是若以指针(或者引用)调用此函数，则可以不指定参数值，因为动态绑定下这个函数从base继承缺省参数值。\n        };\n\n        Shape* ps;\n        Shape* pc = new Circle;\n        Shape* pr = new Rectangle;\n\n    这三个指针的静态类型都是Shape*，动态类型是它们所指的对象的类型。\n\n    Virtual函数由动态绑定而来，即调用一个virtual函数时，究竟调用哪一份代码，取决于发出调用的那个对象的动态类型。\n\n    但是，缺省参数值是静态绑定\n\n        pr->draw();  // 调用Rectangle::draw(Shape::Red)!\n\n    在此例中，pr动态类型是Rectangle*，调用rectangle的virtual函数，没问题；问题在于Rectangle::draw的缺省参数是GREEN，但是由于pr的静态类型是Shape*，所以在此处调用的缺省参数值来自shape而非rectangle。\n\n    以上问题不仅局限于指针，引用也是如此。\n\n3. C++采用这种方式运作的原因：运行期效率。为了程序的执行速度和编译器实现上的简易度，C++做出了这样的取舍。\n4. 如果提供给derived class与base class相同的缺省值，出现的问题是代码重复，因为如果base class缺省参数值变了，所有那些重复给值的class也必须改变。\n5. 解决上面问题的trick：\n\n        class Shape{\n        public:\n            enum ShapeColor{Red, Green, Blue};\n            void draw(ShapeColor color = red) const{\n                doDraw(color);\n            }\n            ...\n        private:\n            virtual void doDraw(ShapeColor color) const = 0;\n            //真正的工作在这里完成\n        };\n\n        class Rectangle: public Shape{\n        public:\n        ...\n        private:\n            virtual void doDraw(ShapeColor color) const;\n            //无需指定缺省参数值.\n        };\n    由于non-virtual函数不应该把派生类覆写，因此这个设计使得draw函数的color缺省参数总为Red.\n    \n</code></pre>","frontmatter":{"title":"Effective C++ 9","date":"2019-12-09","titleImage":null}}},"pageContext":{"slug":"/Effective-C-9/"}}}